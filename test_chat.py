#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã DeepSeek AI Assistant API
"""

import asyncio
import httpx
import json

# URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)
BASE_URL = "http://localhost:8000"

async def test_health():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º /health...")
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{BASE_URL}/health")
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"üìä –û—Ç–≤–µ—Ç: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("-" * 50)

async def test_chat(message: str, stream: bool = False):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    print(f"üí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º /chat (stream={stream})...")
    print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    
    async with httpx.AsyncClient() as client:
        try:
            payload = {
                "message": message,
                "stream": stream
            }
            
            if stream:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
                async with client.stream("POST", f"{BASE_URL}/chat", json=payload) as response:
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
                    print("üì° –°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç:")
                    print("-" * 30)
                    
                    full_response = ""
                    async for chunk in response.aiter_text():
                        print(chunk, end="", flush=True)
                        full_response += chunk
                    
                    print("\n" + "-" * 30)
                    print(f"üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç ({len(full_response)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                response = await client.post(f"{BASE_URL}/chat", json=payload)
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"üìä –û—Ç–≤–µ—Ç: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("-" * 50)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã DeepSeek AI Assistant API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    await test_health()
    
    # –¢–µ—Å—Ç 2: –û–±—ã—á–Ω—ã–π —á–∞—Ç
    await test_chat("–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ª—é–¥–µ–π")
    
    # –¢–µ—Å—Ç 3: –°—Ç—Ä–∏–º–∏–Ω–≥ —á–∞—Ç
    await test_chat("–ö–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–∑–≤–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ?", stream=True)
    
    # –¢–µ—Å—Ç 4: –ö–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å
    await test_chat("–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è?")
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    asyncio.run(main())
